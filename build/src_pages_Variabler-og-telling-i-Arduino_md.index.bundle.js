/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkairbit"] = self["webpackChunkairbit"] || []).push([["src_pages_Variabler-og-telling-i-Arduino_md"],{

/***/ "./src/pages/Variabler-og-telling-i-Arduino.md":
/*!*****************************************************!*\
  !*** ./src/pages/Variabler-og-telling-i-Arduino.md ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"I forrige steg skrev vi ut teksten `Hello World!`. Vi så at Arduinoen kjørte gjennom instruksjonene i `loop` funksjonen om og om igjen. La oss nå endre Hello-World-programmet til å også skrive ut en teller verdi, som vi øker for hver linje.\\n\\nFor dette må vi lage en variabel i programmet vårt. En variabel er en verdi med et navn som kan endre verdi.\\n\\n### Deklarere en ny variabel \\n\\n``` cpp\\nint counter;\\n```\\n\\nKoden over skal legges helt øverst i Sketchen, dvs. **før** begynnelsen av `setup`-funksjonen. Legg gjerne til en tom linje mellom også, for å gjøre det enklere å se de seperate seksjonene.\\n\\nKoden lager en ny variabel som heter `counter`. Linjen sier bare at `counter` eksisterer, dette kalles en *deklarasjon*. Vi kommer til å bruke verdien resten av programmet.\\n\\nForan navnet finner vi kodeordet `int`. Kort for `integer`, som er det engelske ordet for heltall. Dette beskriver hva slags verdier `counter` kan ha. Siden koden sier `int` (i stedet for noen annen type) kan `counter` bare lagre heltallige verdier, både negative og positive.\\n\\n### Initialisering \\n\\nMed deklerasjonen av `counter` variablen må vi nå sette verdien til variablen til en nyttig verdi. Dette må vi gjøre én gang når Arduinoen starter opp. Derfor legger vi følgende til `setup`-funksjonen: (*dvs. før den lukkende krøllparantesen*)\\n\\n``` cpp\\n  counter = 0;\\n```\\n\\nEt enkel likhetstegn er i Arduinokode operatoren for å lagre en verdi i en variabel. Verdien på høyresiden av likhetstegnet plasseres i verdien på venstresiden. Kommandoen over oversettes altså til: plasser verdien `0` i variablen `counter`. Etter denne instruksjonen vil verdien til `counter` altså være `0`, helt til vi endrer den igjen med en annen instruksjon.\\n\\nKode som denne, som setter start-verdier i variabler, kaller vi *initialisering*.\\n\\n### Printe ut variabler \\n\\nI forrige steg brukte vi `Serial.println` for å skrive ut `Hello World!`. La oss først endre teksten til `Hello World! Counter:`. Vi vil også forsette å skrive tekst i en ny kommando på samme linje. Derfor vil vi heller bruke `print` i stedet for `println`.\\n\\n``` cpp\\n  Serial.print(\\\"Hello World! Counter: \\\");\\n```\\n\\n*Merk at vi har lagt til et tomrom på slutten av teksten i koden over.*\\n\\nLa oss nå skrive ut verdien til `counter`. Vi legger bare til en kommando til `Serial.print` en gang til, bare med verdien `counter` i stedet for tekst.\\n\\n``` cpp\\n  Serial.print(counter);\\n```\\n\\nNå er vi ferdig med å skrive linjen, så nå er rette tiden for å skrive videre på en ny linje. Dette kan vi gjøre ved å bruke `println` kommandoen uten noen argument.\\n\\n``` cpp\\n  Serial.println();\\n```\\n\\n*Merk at det ikke står noe mellom parantesene, men parantesene må fortsatt være der.*\\n\\n### Øke verdien til variablen \\n\\nEtter vi ha skrevet ut verdien til `counter` som vi gjorde over, burde vi nå øke verdien `counter` variablen slik at vi får en ny verdi for hver gang koden kjøres. Å øke en verdi kan gjøres ved å legge til `1` til `counter`. Siden den økte verdien må lagres i `counter` igjen, trenger vi forsatt et likhetstegn.  \\nOperatoren for å øke er `+=`. Verdien på venstresiden vil bil økt med verdien på høyresiden.\\n\\nVi legger til følgende kode etter kommandoene der vi skriver ut tekst.\\n\\n``` cpp\\n  counter += 1; // Increase counter by 1.\\n```\\n\\n### Ferdig \\n\\n``` cpp\\nint counter; // Counting-variable, int -> integer value, whole number\\n\\nvoid setup() {\\n  // initialize serial communication at 9600 bauds per second:\\n  Serial.begin(9600);\\n\\n  counter = 0;\\n}\\n\\nvoid loop() {\\n  // print out Hello World and the counter:\\n  Serial.print(\\\"Hello World! Counter: \\\");\\n  Serial.print(counter);\\n  Serial.println();\\n\\n  counter += 1; // Increase counter by 1.\\n\\n  delay(1000); // delay for one second\\n}\\n```\\n\\nEtter den endrete koden har blitt sendt opp til Arduinoen, vil du se følgende i `Serial Monitor`:\\n\\n``` txt\\nHello World! Counter: 1\\nHello World! Counter: 2\\nHello World! Counter: 3\\nHello World! Counter: 4\\n...\\n```\\n\\n## Gå videre\\n\\n&uarr; [Gå til **Introduksjon til Arduino**][intro-prog-home]  \\n&larr; [Gå tilbake til forrige steg: **Hello World**][hello-world]  \\n&darr; [Gå til: **Guider**][guides]  \\n\\n[intro-prog-home]: Introduksjon-til-Arduino-programmering\\n[hello-world]: Arduino-varianten-av-Hello-World\\n[guides]: airbit-Guider\\n\");\n\n//# sourceURL=webpack://airbit/./src/pages/Variabler-og-telling-i-Arduino.md?");

/***/ })

}]);